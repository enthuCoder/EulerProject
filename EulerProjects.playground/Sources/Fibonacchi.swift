import Foundation

public struct Fibonacchi {
    public init() {}
    
    public func fibonacchi(_ lastIndex: Int) -> [Int]? {
        var fibonacchiSequence = [Int]()
        var firstNum = 1, secondNum = 2
        var sum = 0
        
        fibonacchiSequence.append(firstNum)
        fibonacchiSequence.append(secondNum)
        
        for _ in 2..<lastIndex {
            sum = firstNum + secondNum
            fibonacchiSequence.append(sum)
            firstNum = secondNum
            secondNum = sum
        }
        return fibonacchiSequence
    }

    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    //  https://projecteuler.net/problem=2
    public func sumOfEvenValuedNumbers(forInput inputSeq: [Int]) -> Int {
        var sum = 0
        for i in inputSeq where i%2 == 0 {
            sum += i
        }
        return sum
    }
    
    public func fibonacchiSeq(uptoNum: Int) -> [Int]?  {
        var fibonacchiSequence = [Int]()
        var firstNum = 1, secondNum = 2
        var sum = 0
        
        fibonacchiSequence.append(firstNum)
        fibonacchiSequence.append(secondNum)
        
        for _ in 2... {
            sum = firstNum + secondNum
            if sum > uptoNum {
                break
            }
            fibonacchiSequence.append(sum)
            firstNum = secondNum
            secondNum = sum
        }
        return fibonacchiSequence
    }
}
